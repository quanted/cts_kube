stages:
  - Image Build
  - Deployment
  - Restart Pods
  - Image Scan

# Testing "repo mirroring not triggering new pipeline" issue that we're seeing for ordsat

include:
  - project: 'DSO/DASTScanner'
    file: '.gitlab-ci.yml'
  - remote: 'https://gitlab.com/prismacloud-public/shift-left/extension/-/raw/master/.pcs.gitlab-ci.yml'


CopyDevImages:
  stage: Image Build
  tags:
    - devsecops-instance
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    # CTS BioTransformer Image:
    - echo "FROM ghcr.io/quanted/cts-biotransformer:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-biotransformer:$CI_COMMIT_REF_NAME
    # CTS Django Image:
    - echo "FROM ghcr.io/quanted/cts-django:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-django:$CI_COMMIT_REF_NAME
    # CTS EnviPath Image:
    - echo "FROM ghcr.io/kurtw555/cts-envipath:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-envipath:$CI_COMMIT_REF_NAME
    # CTS Celery Image:
    - echo "FROM ghcr.io/quanted/cts-celery:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-celery:$CI_COMMIT_REF_NAME
    # CTS Nginx Image:
    - echo "FROM ghcr.io/quanted/cts-nginx:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-nginx:$CI_COMMIT_REF_NAME
    # CTS NodeJS Image:
    - echo "FROM ghcr.io/quanted/cts-nodejs:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-nodejs:$CI_COMMIT_REF_NAME
    # CTS OPERAWS Image:
    - echo "FROM ghcr.io/quanted/operaws:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-operaws:$CI_COMMIT_REF_NAME
    # CTS Tomcat Image:
    - echo "FROM ghcr.io/quanted/cts-tomcat:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-tomcat:$CI_COMMIT_REF_NAME

  environment:
    name: dev
    url: http://qed.devsecops-dev.aws.epa.gov
    kubernetes:
      namespace: cts-kube

ApplyManifests:
  stage: Deployment
  tags:
    - devsecops-instance
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - kubectl apply -f k8s/
  environment:
    name: dev
    url: http://qed.devsecops-dev.aws.epa.gov
    kubernetes:
      namespace: cts-kube

ScalePods:
  stage: Restart Pods
  tags:
    - devsecops-instance
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - kubectl scale deployment cts-biotransformer --replicas=0
    - kubectl scale deployment cts-biotransformer --replicas=1
    - kubectl scale deployment cts-django --replicas=0
    - kubectl scale deployment cts-django --replicas=1
    - kubectl scale deployment cts-envipath --replicas=0
    - kubectl scale deployment cts-envipath --replicas=1
    - kubectl scale deployment cts-manager --replicas=0
    - kubectl scale deployment cts-manager --replicas=1
    - kubectl scale deployment cts-nginx --replicas=0
    - kubectl scale deployment cts-nginx --replicas=1
    - kubectl scale deployment cts-operaws --replicas=0
    - kubectl scale deployment cts-operaws --replicas=1
    - kubectl scale deployment cts-tomcat --replicas=0
    - kubectl scale deployment cts-tomcat --replicas=1
    - kubectl scale deployment cts-worker --replicas=0
    - kubectl scale deployment cts-worker --replicas=1
    - kubectl scale deployment cts-mongodb --replicas=0
    - kubectl scale deployment cts-mongodb --replicas=1
    - kubectl scale deployment redis --replicas=0
    - kubectl scale deployment redis --replicas=1
  environment:
    name: dev
    url: http://qed.devsecops-dev.aws.epa.gov
    kubernetes:
      namespace: cts-kube

BiotransformerImageScan:
  stage: Image Scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: false
  variables:
    prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
    GIT_STRATEGY: clone
    prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-biotransformer:dev-gl" 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh

DjangoImageScan:
  stage: Image Scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: false
  variables:
    prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
    GIT_STRATEGY: clone
    prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-django:dev-gl" 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh

EnvipathImageScan:
  stage: Image Scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: false
  variables:
    prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
    GIT_STRATEGY: clone
    prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-envipath:dev-gl" 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh

CeleryImageScan:
  stage: Image Scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: false
  variables:
    prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
    GIT_STRATEGY: clone
    prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-celery:dev-gl" 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh

NginxImageScan:
  stage: Image Scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: false
  variables:
    prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
    GIT_STRATEGY: clone
    prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-nginx:dev-gl" 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh

NodejsImageScan:
  stage: Image Scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: false
  variables:
    prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
    GIT_STRATEGY: clone
    prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-nodejs:dev-gl" 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh

OperawsImageScan:
  stage: Image Scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: false
  variables:
    prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
    GIT_STRATEGY: clone
    prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-operaws:dev-gl" 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh

TomcatImageScan:
  stage: Image Scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: false
  variables:
    prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
    GIT_STRATEGY: clone
    prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-tomcat:dev-gl" 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh
