stages:
  - Image Build
  - Image Scan
  - Deployment
  # - Scheduled Tasks


include:
  - remote: 'https://gitlab.com/prismacloud-public/shift-left/extension/-/raw/master/.pcs.gitlab-ci.yml'
  - local: 'version.yml'


variables:
  cts_biotransformer_tag: dev-kube  # GHCR tag
  cts_celery_tag: dev-kube  # GHCR tag
  cts_django_tag: dev-kube  # GHCR tag
  cts_envipath_tag: dev-kube  # GHCR tag
  cts_mongodb_tag: dev-kube  # GHCR tag
  cts_nginx_tag: dev-kube  # GHCR tag
  cts_nodejs_tag: dev-kube  # GHCR tag
  cts_redis_tag: dev-kube  # GHCR tag
  ctsws_tag: $CTSWS_TAG  # GHCR tag (set in Gitlab Variables)
  jchemws_tag: $JCHEMWS_TAG  # GHCR tag (set in Gitlab Variables)
  operaws_tag: $OPERAWS_TAG  # GHCR tag (set in Gitlab Variables)
  # glcr_tag_name: $CI_COMMIT_REF_NAME-$CI_COMMIT_SHA


CopyDevImages:
  stage: Image Build
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    # CTS BioTransformer Image:
    - echo "FROM ghcr.io/quanted/cts-biotransformer:$cts_biotransformer_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-biotransformer:$CI_COMMIT_REF_NAME
    # CTS Django Image:
    - echo "FROM ghcr.io/quanted/cts-django:$cts_django_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-django:$CI_COMMIT_REF_NAME
    # CTS EnviPath Image:
    - echo "FROM ghcr.io/kurtw555/cts-envipath:$cts_envipath_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-envipath:$CI_COMMIT_REF_NAME
    # CTS Celery Image:
    - echo "FROM ghcr.io/quanted/cts-celery:$cts_celery_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-celery:$CI_COMMIT_REF_NAME
    # CTS Nginx Image:
    - echo "FROM ghcr.io/quanted/cts-nginx:$cts_nginx_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-nginx:$CI_COMMIT_REF_NAME
    # CTS NodeJS Image:
    - echo "FROM ghcr.io/quanted/cts-nodejs:$cts_nodejs_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-nodejs:$CI_COMMIT_REF_NAME
    # CTS OPERAWS Image:
    - echo "FROM ghcr.io/quanted/operaws:$operaws_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-operaws:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA
    # CTSWS Image:
    - echo "FROM ghcr.io/quanted/ctsws:$ctsws_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/ctsws:$CI_COMMIT_REF_NAME
    # JchemWS Image:
    - echo "FROM ghcr.io/quanted/jchemws:$jchemws_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/jchemws:$CI_COMMIT_REF_NAME
    # CTS MongoDB Image:
    - echo "FROM ghcr.io/quanted/cts-mongodb:$cts_mongodb_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-mongodb:$CI_COMMIT_REF_NAME
    # CTS Redis Image:
    - echo "FROM ghcr.io/quanted/cts-redis:$cts_redis_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-redis:$CI_COMMIT_REF_NAME
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg


SetProdImages:
  stage: Image Build
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    # CTS BioTransformer Image:
    - echo "FROM ghcr.io/quanted/cts-biotransformer:cts_biotransformer_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-biotransformer:main-$PROD_VERSION
    # CTS Django Image:
    - echo "FROM ghcr.io/quanted/cts-django:cts_django_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-django:main-$PROD_VERSION
    # CTS EnviPath Image:
    - echo "FROM ghcr.io/kurtw555/cts-envipath:cts-envipath_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-envipath:main-$PROD_VERSION
    # CTS Celery Image:
    - echo "FROM ghcr.io/quanted/cts-celery:cts_celery_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-celery:main-$PROD_VERSION
    # CTS Nginx Image:
    - echo "FROM ghcr.io/quanted/cts-nginx:cts_nginx_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-nginx:main-$PROD_VERSION
    # CTS NodeJS Image:
    - echo "FROM ghcr.io/quanted/cts-nodejs:cts_nodejs_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-nodejs:main-$PROD_VERSION
    # CTS OPERAWS Image:
    - echo "FROM ghcr.io/quanted/operaws:operaws_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-operaws:main-$PROD_VERSION
    # CTSWS Image:
    - echo "FROM ghcr.io/quanted/ctsws:$ctsws_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/ctsws:main-$PROD_VERSION
    # JchemWS Image:
    - echo "FROM ghcr.io/quanted/jchemws:$jchemws_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/jchemws:main-$PROD_VERSION
    # CTS MongoDB Image:
    - echo "FROM ghcr.io/quanted/cts-mongodb:cts_mongodb_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-mongodb:main-$PROD_VERSION
    # CTS Redis Image:
    - echo "FROM ghcr.io/quanted/cts-redis:cts_redis_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-redis:main-$PROD_VERSION
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg


ApplyManifests:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - apk add gettext
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - envsubst < k8s/cts-configmap.yml | kubectl apply -f -
    - envsubst < k8s/cts-redis-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-redis-service.yml | kubectl apply -f -
    - envsubst < k8s/cts-nginx-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-nginx-service.yml | kubectl apply -f -
    - envsubst < k8s/cts-celery-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-django-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-django-service.yml | kubectl apply -f -
    - envsubst < k8s/cts-nodejs-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-nodejs-service.yml | kubectl apply -f -
    - envsubst < k8s/cts-mongodb-service.yml | kubectl apply -f -
    - envsubst < k8s/cts-mongodb-statefulset.yml | kubectl apply -f -
    - envsubst < k8s/cts-tomcat-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-tomcat-service.yml | kubectl apply -f -
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg


DeleteManifests:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - kubectl delete -f k8s/cts-configmap.yml
    - kubectl delete -f k8s/cts-celery-deployment.yml
    - kubectl delete -f k8s/cts-django-deployment.yml
    - kubectl delete -f k8s/cts-django-service.yml
    - kubectl delete -f k8s/cts-nodejs-deployment.yml
    - kubectl delete -f k8s/cts-nodejs-service.yml
    - kubectl delete -f k8s/cts-mongodb-service.yml
    - kubectl delete -f k8s/cts-mongodb-statefulset.yml
    - kubectl delete -f k8s/cts-nginx-deployment.yml
    - kubectl delete -f k8s/cts-nginx-service.yml
    - kubectl delete -f k8s/cts-redis-deployment.yml
    - kubectl delete -f k8s/cts-redis-service.yml
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg


ApplyPVC:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - kubectl apply -f k8s/cts-pvcs.yml
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg


LoadVolumeData:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - chmod 775 ./cts-mongodb-volume-setup.sh
    - ./cts-mongodb-volume-setup.sh
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg


BiotransformerImageScan:
  stage: Image Scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: true
  variables:
    prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
    GIT_STRATEGY: clone
    prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-biotransformer:$CI_COMMIT_REF_NAME" 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh


DjangoImageScan:
  stage: Image Scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: true
  variables:
    prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
    GIT_STRATEGY: clone
    prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-django:$CI_COMMIT_REF_NAME" 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh


EnvipathImageScan:
  stage: Image Scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: true
  variables:
    prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
    GIT_STRATEGY: clone
    prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-envipath:$CI_COMMIT_REF_NAME" 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh


CeleryImageScan:
  stage: Image Scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: true
  variables:
    prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
    GIT_STRATEGY: clone
    prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-celery:$CI_COMMIT_REF_NAME" 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh


NginxImageScan:
  stage: Image Scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: true
  variables:
    prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
    GIT_STRATEGY: clone
    prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-nginx:$CI_COMMIT_REF_NAME" 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh


NodejsImageScan:
  stage: Image Scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: true
  variables:
    prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
    GIT_STRATEGY: clone
    prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-nodejs:$CI_COMMIT_REF_NAME" 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh


OperawsImageScan:
  stage: Image Scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: true
  variables:
    prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
    GIT_STRATEGY: clone
    prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-operaws:$CI_COMMIT_REF_NAME" 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh


TomcatImageScan:
  stage: Image Scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: true
  variables:
    prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
    GIT_STRATEGY: clone
    prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-tomcat:$CI_COMMIT_REF_NAME" 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh


# Generate GA Report:
#   stage: Scheduled Tasks
#   tags:
#     - qed-stg-runner
#   environment:
#     name: stg
#     url: http://qed.qed-stage.aws.epa.gov
#     kubernetes:
#       namespace: qed-45-stg
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "schedule"