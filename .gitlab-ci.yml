stages:
  - Image Build
  - Deployment
  - Restart Pods
  - Image Scan

# Testing "repo mirroring not triggering new pipeline" issue that we're seeing for ordsat

include:
  - project: 'DSO/DASTScanner'
    file: '.gitlab-ci.yml'
  - remote: 'https://gitlab.com/prismacloud-public/shift-left/extension/-/raw/master/.pcs.gitlab-ci.yml'


variables:
  # cts_biotransformer_version: 0.0.1
  cts_celery_version: 0.0.1
  cts_django_version: 0.0.1
  # cts_envipath_version: 0.0.1
  cts_nginx_version: 0.0.1
  cts_nodejs_version: 0.0.1
  # cts_operaws_version: 0.0.1
  cts_tomcat_version: 0.0.1

  tag_name: $CI_COMMIT_REF_NAME-$CI_COMMIT_SHA


# Build OPERAWS Image:
#   stage: Image Build
#   tags:
#     - qed-stg-runner
#   image:
#     docker:stable
#   when: manual
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
#     - docker build -t cts-operaws:$tag_name operaws/
#     - docker push https://registry.epa.gov/qed/cts_kube/cts-operaws:$tag_name


CopyDevImages:
  stage: Image Build
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    # # CTS BioTransformer Image:
    # - echo "FROM ghcr.io/quanted/cts-biotransformer:dev-kube" > /workspace/Dockerfile
    # - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-biotransformer:$CI_COMMIT_REF_NAME
    # CTS Django Image:
    - echo "FROM ghcr.io/quanted/cts-django:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-django:$CI_COMMIT_REF_NAME
    # # CTS EnviPath Image:
    # - echo "FROM ghcr.io/kurtw555/cts-envipath:dev-kube" > /workspace/Dockerfile
    # - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-envipath:$CI_COMMIT_REF_NAME
    # CTS Celery Image:
    - echo "FROM ghcr.io/quanted/cts-celery:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-celery:$CI_COMMIT_REF_NAME
    # CTS Nginx Image:
    - echo "FROM ghcr.io/quanted/cts-nginx:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-nginx:$CI_COMMIT_REF_NAME
    # CTS NodeJS Image:
    - echo "FROM ghcr.io/quanted/cts-nodejs:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-nodejs:$CI_COMMIT_REF_NAME
    # # CTS OPERAWS Image:
    # - echo "FROM ghcr.io/quanted/operaws:dev-kube-$CI_COMMIT_SHA" > /workspace/Dockerfile
    # - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-operaws:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA
    # CTS Tomcat Image:
    - echo "FROM ghcr.io/quanted/cts-tomcat:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-tomcat:$CI_COMMIT_REF_NAME
    # CTS MongoDB Image:
    - echo "FROM ghcr.io/quanted/cts-mongodb:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-mongodb:$CI_COMMIT_REF_NAME
    # CTS Redis Image:
    - echo "FROM ghcr.io/quanted/cts-redis:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-redis:$CI_COMMIT_REF_NAME

  environment:
    name: dev
    url: https://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

ApplyManifests:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - envsubst < k8s/cts-configmap.yml | kubectl apply -f -
    - envsubst < k8s/cts-celery-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-django-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-django-service.yml | kubectl apply -f -
    - envsubst < k8s/cts-nodejs-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-nodejs-service.yml | kubectl apply -f -
    # - envsubst < k8s/cts-mongodb-service.yml | kubectl apply -f -
    # - envsubst < k8s/cts-mongodb-statefulset.yml | kubectl apply -f -
    - envsubst < k8s/cts-nginx-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-nginx-service.yml | kubectl apply -f -
    - envsubst < k8s/cts-redis-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-redis-service.yml | kubectl apply -f -
  environment:
    name: dev
    url: https://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

DeleteManifests:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - kubectl delete -f k8s/
  environment:
    name: stg
    url: https://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

ApplyPVC:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - kubectl apply -f k8s/cts-pvcs.yml
  environment:
    name: stg
    url: https://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

# ScalePods:
#   stage: Restart Pods
#   tags:
#     - qed-stg-runner
#   when: manual
#   image: dtzar/helm-kubectl
#   script:
#     - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
#     - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
#     - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
#     - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
#     - kubectl config use-context default
#     - kubectl scale deployment cts-biotransformer --replicas=0
#     - kubectl scale deployment cts-biotransformer --replicas=1
#     - kubectl scale deployment cts-django --replicas=0
#     - kubectl scale deployment cts-django --replicas=1
#     - kubectl scale deployment cts-envipath --replicas=0
#     - kubectl scale deployment cts-envipath --replicas=1
#     - kubectl scale deployment cts-manager --replicas=0
#     - kubectl scale deployment cts-manager --replicas=1
#     - kubectl scale deployment cts-nginx --replicas=0
#     - kubectl scale deployment cts-nginx --replicas=1
#     - kubectl scale deployment cts-operaws --replicas=0
#     - kubectl scale deployment cts-operaws --replicas=1
#     - kubectl scale deployment cts-tomcat --replicas=0
#     - kubectl scale deployment cts-tomcat --replicas=1
#     - kubectl scale deployment cts-worker --replicas=0
#     - kubectl scale deployment cts-worker --replicas=1
#     - kubectl scale deployment cts-mongodb --replicas=0
#     - kubectl scale deployment cts-mongodb --replicas=1
#     - kubectl scale deployment redis --replicas=0
#     - kubectl scale deployment redis --replicas=1
#   environment:
#     name: dev
#     url: https://qed.qed-stage.aws.epa.gov
#     kubernetes:
#       namespace: qed-45-stg

# BiotransformerImageScan:
#   stage: Image Scan
#   extends:
#     - .pcs_compute_scan
#   tags:
#     - twistcli
#   when: manual
#   allow_failure: false
#   variables:
#     prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
#     GIT_STRATEGY: clone
#     prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-biotransformer:dev-gl" 
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
#     - docker pull $prisma_cloud_scan_image
#     - ./image_scan.sh

# DjangoImageScan:
#   stage: Image Scan
#   extends:
#     - .pcs_compute_scan
#   tags:
#     - twistcli
#   when: manual
#   allow_failure: false
#   variables:
#     prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
#     GIT_STRATEGY: clone
#     prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-django:dev-gl" 
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
#     - docker pull $prisma_cloud_scan_image
#     - ./image_scan.sh

# # EnvipathImageScan:
# #   stage: Image Scan
# #   extends:
# #     - .pcs_compute_scan
# #   tags:
# #     - twistcli
# #   when: manual
# #   allow_failure: false
# #   variables:
# #     prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
# #     GIT_STRATEGY: clone
# #     prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-envipath:dev-gl" 
# #   script:
# #     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
# #     - docker pull $prisma_cloud_scan_image
# #     - ./image_scan.sh

# CeleryImageScan:
#   stage: Image Scan
#   extends:
#     - .pcs_compute_scan
#   tags:
#     - twistcli
#   when: manual
#   allow_failure: false
#   variables:
#     prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
#     GIT_STRATEGY: clone
#     prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-celery:dev-gl" 
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
#     - docker pull $prisma_cloud_scan_image
#     - ./image_scan.sh

# NginxImageScan:
#   stage: Image Scan
#   extends:
#     - .pcs_compute_scan
#   tags:
#     - twistcli
#   when: manual
#   allow_failure: false
#   variables:
#     prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
#     GIT_STRATEGY: clone
#     prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-nginx:dev-gl" 
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
#     - docker pull $prisma_cloud_scan_image
#     - ./image_scan.sh

# NodejsImageScan:
#   stage: Image Scan
#   extends:
#     - .pcs_compute_scan
#   tags:
#     - twistcli
#   when: manual
#   allow_failure: false
#   variables:
#     prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
#     GIT_STRATEGY: clone
#     prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-nodejs:dev-gl" 
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
#     - docker pull $prisma_cloud_scan_image
#     - ./image_scan.sh

# # OperawsImageScan:
# #   stage: Image Scan
# #   extends:
# #     - .pcs_compute_scan
# #   tags:
# #     - twistcli
# #   when: manual
# #   allow_failure: false
# #   variables:
# #     prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
# #     GIT_STRATEGY: clone
# #     prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-operaws:dev-gl" 
# #   script:
# #     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
# #     - docker pull $prisma_cloud_scan_image
# #     - ./image_scan.sh

# TomcatImageScan:
#   stage: Image Scan
#   extends:
#     - .pcs_compute_scan
#   tags:
#     - twistcli
#   when: manual
#   allow_failure: false
#   variables:
#     prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
#     GIT_STRATEGY: clone
#     prisma_cloud_scan_image: "registry.epa.gov/qed/cts_kube/cts-tomcat:dev-gl" 
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
#     - docker pull $prisma_cloud_scan_image
#     - ./image_scan.sh
