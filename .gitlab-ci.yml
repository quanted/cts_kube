stages:
  - Image Copy
  - Image Scan
  - Deployment
  # - Scheduled Tasks


include:
  - remote: 'https://gitlab.com/prismacloud-public/shift-left/extension/-/raw/master/.pcs.gitlab-ci.yml'
  - local: 'version.yml'


variables:
  cts_biotransformer_ghcr_tag: dev-kube
  cts_celery_ghcr_tag: dev-kube
  cts_django_ghcr_tag: dev-kube
  cts_envipath_ghcr_tag: dev-kube
  cts_mongodb_ghcr_tag: dev-kube
  cts_nginx_ghcr_tag: dev-kube
  cts_nodejs_ghcr_tag: dev-kube
  cts_redis_ghcr_tag: dev-kube
  ctsws_ghcr_tag: $CTSWS_TAG  # NOTE: Set in Gitlab Variables
  jchemws_ghcr_tag: $JCHEMWS_TAG  # NOTE: Set in Gitlab Variables
  operaws_ghcr_tag: $OPERAWS_TAG  # NOTE: Set in Gitlab Variables
  pkasolver_ghcr_tag: $PKASOLVER_TAG
  # glcr_tag_name: $CI_COMMIT_REF_NAME-$CI_COMMIT_SHA



Copy CTS BioTransformer Image:
  stage: Image Copy
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    - echo "FROM ghcr.io/quanted/cts-biotransformer:$cts_biotransformer_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-biotransformer:$CI_COMMIT_REF_NAME
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

Copy CTS Django Image:
  stage: Image Copy
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    - echo "FROM ghcr.io/quanted/cts-django:$cts_django_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-django:$CI_COMMIT_REF_NAME
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

Copy CTS EnviPath Image:
  stage: Image Copy
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    - echo "FROM ghcr.io/kurtw555/cts-envipath:$cts_envipath_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-envipath:$CI_COMMIT_REF_NAME
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

Copy CTS Celery Image:
  stage: Image Copy
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    - echo "FROM ghcr.io/quanted/cts-celery:$cts_celery_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-celery:$CI_COMMIT_REF_NAME
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

Copy CTS Nginx Image:
  stage: Image Copy
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    - echo "FROM ghcr.io/quanted/cts-nginx:$cts_nginx_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-nginx:$CI_COMMIT_REF_NAME
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

Copy CTS NodeJS Image:
  stage: Image Copy
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    - echo "FROM ghcr.io/quanted/cts-nodejs:$cts_nodejs_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-nodejs:$CI_COMMIT_REF_NAME
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

Copy CTS OPERAWS Image:
  stage: Image Copy
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    - echo "FROM ghcr.io/quanted/operaws:$operaws_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-operaws:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

Copy CTSWS Image:
  stage: Image Copy
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    - echo "FROM ghcr.io/quanted/ctsws:$ctsws_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/ctsws:$CI_COMMIT_REF_NAME
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

Copy JchemWS Image:
  stage: Image Copy
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    - echo "FROM ghcr.io/quanted/jchemws:$jchemws_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/jchemws:$CI_COMMIT_REF_NAME
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

Copy CTS MongoDB Image:
  stage: Image Copy
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    - echo "FROM ghcr.io/quanted/cts-mongodb:$cts_mongodb_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-mongodb:$CI_COMMIT_REF_NAME
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

Copy CTS Redis Image:
  stage: Image Copy
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    - echo "FROM ghcr.io/quanted/cts-redis:$cts_redis_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-redis:$CI_COMMIT_REF_NAME
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

Copy CTS Pkasolver Flask Image:
  stage: Image Copy
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    - echo "FROM ghcr.io/quanted/cts-pkasolver:$pkasolver_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-pkasolver:$CI_COMMIT_REF_NAME
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg



SetProdImages:
  stage: Image Copy
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    # CTS BioTransformer Image:
    - echo "FROM ghcr.io/quanted/cts-biotransformer:$cts_biotransformer_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-biotransformer:main-$PROD_VERSION
    # CTS Django Image:
    - echo "FROM ghcr.io/quanted/cts-django:$cts_django_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-django:main-$PROD_VERSION
    # CTS EnviPath Image:
    - echo "FROM ghcr.io/kurtw555/cts-envipath:$cts_envipath_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-envipath:main-$PROD_VERSION
    # CTS Celery Image:
    - echo "FROM ghcr.io/quanted/cts-celery:$cts_celery_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-celery:main-$PROD_VERSION
    # CTS Nginx Image:
    - echo "FROM ghcr.io/quanted/cts-nginx:$cts_nginx_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-nginx:main-$PROD_VERSION
    # CTS NodeJS Image:
    - echo "FROM ghcr.io/quanted/cts-nodejs:$cts_nodejs_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-nodejs:main-$PROD_VERSION
    # CTS OPERAWS Image:
    - echo "FROM ghcr.io/quanted/operaws:$operaws_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-operaws:main-$PROD_VERSION
    # CTSWS Image:
    - echo "FROM ghcr.io/quanted/ctsws:$ctsws_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/ctsws:main-$PROD_VERSION
    # JchemWS Image:
    - echo "FROM ghcr.io/quanted/jchemws:$jchemws_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/jchemws:main-$PROD_VERSION
    # CTS MongoDB Image:
    - echo "FROM ghcr.io/quanted/cts-mongodb:$cts_mongodb_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-mongodb:main-$PROD_VERSION
    # CTS Redis Image:
    - echo "FROM ghcr.io/quanted/cts-redis:$cts_redis_ghcr_tag" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cts-redis:main-$PROD_VERSION
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg



ApplyManifests:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - apk add gettext
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - envsubst < k8s/cts-configmap.yml | kubectl apply -f -
    - envsubst < k8s/cts-redis-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-redis-service.yml | kubectl apply -f -
    - envsubst < k8s/cts-nginx-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-nginx-service.yml | kubectl apply -f -
    - envsubst < k8s/cts-celery-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-django-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-django-service.yml | kubectl apply -f -
    - envsubst < k8s/cts-nodejs-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-nodejs-service.yml | kubectl apply -f -
    - envsubst < k8s/cts-mongodb-service.yml | kubectl apply -f -
    - envsubst < k8s/cts-mongodb-statefulset.yml | kubectl apply -f -
    - envsubst < k8s/cts-ctsws-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-ctsws-service.yml | kubectl apply -f -
    - envsubst < k8s/cts-jchemws-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cts-jchemws-service.yml | kubectl apply -f -
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg



DeleteManifests:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - kubectl delete -f k8s/cts-configmap.yml
    - kubectl delete -f k8s/cts-celery-deployment.yml
    - kubectl delete -f k8s/cts-django-deployment.yml
    - kubectl delete -f k8s/cts-django-service.yml
    - kubectl delete -f k8s/cts-nodejs-deployment.yml
    - kubectl delete -f k8s/cts-nodejs-service.yml
    - kubectl delete -f k8s/cts-mongodb-service.yml
    - kubectl delete -f k8s/cts-mongodb-statefulset.yml
    - kubectl delete -f k8s/cts-nginx-deployment.yml
    - kubectl delete -f k8s/cts-nginx-service.yml
    - kubectl delete -f k8s/cts-redis-deployment.yml
    - kubectl delete -f k8s/cts-redis-service.yml
    - kubectl delete -f k8s/cts-ctsws-deployment.yml
    - kubectl delete -f k8s/cts-ctsws-service.yml
    - kubectl delete -f k8s/cts-jchemws-deployment.yml
    - kubectl delete -f k8s/cts-jchemws-service.yml
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg



ApplyPVC:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - kubectl apply -f k8s/cts-pvcs.yml
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg



LoadVolumeData:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - chmod 775 ./cts-mongodb-volume-setup.sh
    - ./cts-mongodb-volume-setup.sh
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg



Biotransformer Prisma Scan:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/cts-biotransformer:$CI_COMMIT_REF_NAME 
    - ./twistcli images scan $CI_REGISTRY_IMAGE/cts-biotransformer:$CI_COMMIT_REF_NAME --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN
  after_script:
    - rm -rf $CI_PROJECT_DIR

Django Prisma Scan:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/cts-django:$CI_COMMIT_REF_NAME
    - ./twistcli images scan $CI_REGISTRY_IMAGE/cts-django:$CI_COMMIT_REF_NAME --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN
  after_script:
    - rm -rf $CI_PROJECT_DIR

Envipath Prisma Scan:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/cts-envipath:$CI_COMMIT_REF_NAME 
    - ./twistcli images scan $CI_REGISTRY_IMAGE/cts-envipath:$CI_COMMIT_REF_NAME --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN
  after_script:
    - rm -rf $CI_PROJECT_DIR

Celery Prisma Scan:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/cts-celery:$CI_COMMIT_REF_NAME 
    - ./twistcli images scan $CI_REGISTRY_IMAGE/cts-celery:$CI_COMMIT_REF_NAME --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN
  after_script:
    - rm -rf $CI_PROJECT_DIR

Nginx Prisma Scan:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/cts-nginx:$CI_COMMIT_REF_NAME 
    - ./twistcli images scan $CI_REGISTRY_IMAGE/cts-nginx:$CI_COMMIT_REF_NAME --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN
  after_script:
    - rm -rf $CI_PROJECT_DIR

Nodejs Prisma Scan:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/cts-nodejs:$CI_COMMIT_REF_NAME 
    - ./twistcli images scan $CI_REGISTRY_IMAGE/cts-nodejs:$CI_COMMIT_REF_NAME --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN
  after_script:
    - rm -rf $CI_PROJECT_DIR

Operaws Prisma Scan:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/cts-operaws:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA
    - ./twistcli images scan $CI_REGISTRY_IMAGE/cts-operaws:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN
  after_script:
    - rm -rf $CI_PROJECT_DIR

CTSWS Prisma Scan:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/ctsws:$CI_COMMIT_REF_NAME 
    - ./twistcli images scan $CI_REGISTRY_IMAGE/ctsws:$CI_COMMIT_REF_NAME --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN
  after_script:
    - rm -rf $CI_PROJECT_DIR

JchemWS Prisma Scan:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/jchemws:$CI_COMMIT_REF_NAME 
    - ./twistcli images scan $CI_REGISTRY_IMAGE/jchemws:$CI_COMMIT_REF_NAME --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN
  after_script:
    - rm -rf $CI_PROJECT_DIR

Redis Prisma Scan:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/cts-redis:$CI_COMMIT_REF_NAME 
    - ./twistcli images scan $CI_REGISTRY_IMAGE/cts-redis:$CI_COMMIT_REF_NAME --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN
  after_script:
    - rm -rf $CI_PROJECT_DIR

MongoDB Prisma Scan:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/cts-mongodb:$CI_COMMIT_REF_NAME 
    - ./twistcli images scan $CI_REGISTRY_IMAGE/cts-mongodb:$CI_COMMIT_REF_NAME --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN
  after_script:
    - rm -rf $CI_PROJECT_DIR

Pkasolver Prisma Scan:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/cts-pkasolver:$CI_COMMIT_REF_NAME 
    - ./twistcli images scan $CI_REGISTRY_IMAGE/cts-pkasolver:$CI_COMMIT_REF_NAME --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN
  after_script:
    - rm -rf $CI_PROJECT_DIR
